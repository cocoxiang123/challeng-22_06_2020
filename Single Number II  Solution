Given a non-empty array of integers, every element appears three times except for one, which appears exactly once. Find that single one.

Note:

Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?

Example 1:

Input: [2,2,3,2]
Output: 3
Example 2:

Input: [0,1,0,1,0,1,99]
Output: 99

solution 1:
/**
 * @param {number[]} nums
 * @return {number}
 */
var singleNumber = function(nums) {
    var hash={}
    nums.forEach(x=>hash[x]?hash[x]++:hash[x]=1)
    for(const x in hash){
        if(hash[x]==1){
            return x
        }
    }
};
solution2:
var singleNumber = function(nums) {
    let map = {};
    for(let num of nums) {
        if(map[num]) {
            map[num]+= 1;
        } else {
           map[num] = 1;
        }
    }
    return Object.keys(map).find(key => map[key] === 1);
};
